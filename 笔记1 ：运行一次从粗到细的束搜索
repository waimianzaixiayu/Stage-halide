#######################################
#### 笔记1 ：运行一次从粗到细的束搜索 ####
#######################################

################## 函数enqueue_new_children ############

1.起始状态：没有做出决策，可能的state将存储在队列StateQueue q里面，目前为空

2.定义一个函数enqueue_new_children，用来添加子state，子state的决策数量需要大于父state
定义一个变量progress表示进程 = s.num_decisions_made * beam_size + expanded

(
num_decisions_made：做出的决策个数
beam size:束搜索中使用的束大小。默认为 32。使用 1 来代替贪婪搜索。
expanded：扩大的数目（子state多出的数目）
）

定义一个变量max_progress表示进程的上限 = dag.nodes.size() * beam_size * 2

定义一个变量penalized指示是否penalize该方案

3.把该state放入队列StateQueue q等待进一步评估

########### 对决策序列的束搜索的循环 #############

1.判断是否是故意的死代码。
将beam 大小加倍并重新启动。
暂时禁用，因为总死亡率可能表明存在错误。

2.当候选的states数量过大（超过beam_size * 10000），弹出错误提示

3.当expanded 小于 beam_size，用论文中提到的hashing策略进行从粗到细的束搜索，开始逐一评估
根据结构唯一性对队列进行成本惩罚。

（
根据state出现的次数来决定惩罚的力度，
为了防止符合条件的states在hash中过早出局，我们虽然加大惩罚力度，但仍然把它保留在队列里面。
已经被惩罚过的state贴上被惩罚过的标签，这次不再惩罚，延后再看再比较
）


########### Random Dropout #############

1.当满足num_decisions_made == 2 * (int)dag.nodes.size()，比较结束，第一个state表现最好，为最优解

2.保留在最优值1.2倍范围以内的其他优质state，数量控制在beam size以内

3.删除其他解

4.按解的优劣排序

5. ...












##########################################################
Note
#
HL_CYOS:"Choose-your-own-schedule"
如果设置为 1，在终端中手动导航搜索树,用于调试自动调度程序。

# 
seed: 随机 dropout 使用的随机种子

#
RANDOM_DROPOUT:接受束中每个状态的百分比。
通过决定数量对它进行标准化
5 代表 5% 的机会永远不会拒绝任何状态。

